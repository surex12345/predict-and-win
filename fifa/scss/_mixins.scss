/* @include clearit
.button {
@include clearit
}
*/
@mixin clearit {
    &:after,
    &:before {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
    zoom: 1;
}
/*Background cover*/
@mixin background_properties($repeat:no-repeat,$attachment:fixed,$size:cover,$position:center center,$color:#000000){
  background-repeat: $repeat;
  background-attachment:$attachment;
  background-size: $size;
background-position: $position;
background-color:$color;

}

/* @include transition(all,2s,ease-out); */
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
    -webkit-transition: $what $time $how;
    -moz-transition: $what $time $how;
    -ms-transition: $what $time $how;
    -o-transition: $what $time $how;
    transition: $what $time $how;
}
@mixin translate($left,$top){
  transform:translate($left,$top);
  -webikit-transform:translate($left,$top);
  -ms-transform:translate($left,$top);
}
/* CALC mining
  @include calc( width, '100% - 2px');
*/
@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

/* Opacity(value:0.3) */
@mixin opacity($value){
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}

/* Background Overlay bg_overlay(color:#fff,value:0.3) */
@mixin bg_overlay($color:#fff,$value:0.3) {
    position: relative;
    $IEValue:$value*100;
    &:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
        background: $color;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
        filter: alpha(opacity=$IEValue);
        opacity: $value;
    }
}
/* @include breakpoint(sm);

aside.primary {
  float: right;
  width: 350px;
  @include breakpoint(sm) {
    float: none;
    width: 100%;
  }
}

*/
@mixin breakpoint($class) {
     @if $class == xxs{
        @media (max-width: 500px) {
             @content;
        }
    }
    @if $class == xs {
         @media (max-width: 767px){
            @content;
        }
    }
    @else if $class == sm {
         @media (min-width: 768px){
            @content;
        }
    }
    @else if $class == sm_max {
         @media (max-width: 991px){
            @content;
        }
    }
    @else if $class == md {
         @media (min-width: 992px){
            @content;
        }
    }
    @else if $class == md_max {
         @media (max-width: 1199px){
            @content;
        }
    }
    @else if $class == lg {
         @media (min-width: 1200px){
            @content;
        }
    }
    @else if $class == lg_max {
         @media (max-width: 1199px){
            @content;
        }
    }
}
@mixin min-width($width) {
     @media (min-width: $width){
        @content;
    }
}
@mixin max-width($width) {
     @media (max-width: $width){
        @content;
    }
}
/* @include breakpoint(sm);

aside.primary {
  float: right;
  width: 350px;
  @include breakpoint_num($min: 200px, $max: 767px) {
    float: none;
    width: 100%;
  }
}

*/
@mixin breakpoint_between($min: 0, $max: 0) {
    $type: type-of($min);
    @if $type == string {}
    @else if $type == number {
        $query: "all" !default;
        @if $min != 0 and $max != 0 {
            $query: "(min-width: #{$min}) and (max-width: #{$max})";
        }
        @else if $min != 0 and $max == 0 {
            $query: "(min-width: #{$min})";
        }
        @else if $min == 0 and $max != 0 {
            $query: "(max-width: #{$max})";
        }
        @media #{$query} {
             @content;
        }
    }
}
/* transform rotate */
@mixin rotate($deg) {
    -ms-transform: rotate($deg);
    /* IE 9 */
    -webkit-transform: rotate($deg);
    /* Chrome, Safari, Opera */
    transform: rotate($deg);
}
/*transform scale */
@mixin scale($scale:1.1) {
  -webkit-transform: scale($scale);
-moz-transform: scale($scale);
-o-transform: scale($scale);
transform: scale($scale);
}
@mixin scale_both($scale-x:1,$scale-y:1) {
  -webkit-transform: scale($scale-x,$scale-y);
-moz-transform: scale($scale-x,$scale-y);
-o-transform: scale($scale-x,$scale-y);
transform: scale($scale-x,$scale-y);
}

/* elipsis */
@mixin ellipsis{
  white-space: nowrap;
overflow: hidden;
text-overflow:ellipsis;
}
/* for retina image display */
@mixin image-retina( $filename , $extension, $size ) {
  background-image: url($filename + '.' + $extension);

  @media (-webkit-min-device-pixel-ratio: 2), (-moz-min-device-pixel-ratio: 2) {
    & {
      background-image: url($filename + '@2x.' + $extension);
      -webkit-background-size: $size;
    }
  }
}
